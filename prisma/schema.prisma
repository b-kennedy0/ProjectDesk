datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           Int      @id @default(autoincrement())
  name         String?
  email        String   @unique
  role         UserRole @default(STUDENT)
  supervisorId Int?
  passwordHash String? // used only for local Credentials auth (nullable for SSO users)

  // --- Project relations ---
  supervisedProjects   Project[] @relation("ProjectSupervisor")
  studentProjects      Project[] @relation("ProjectStudents")
  collaboratorProjects Project[] @relation("ProjectCollaborators")

  // --- Other relations ---
  memberships           ProjectMember[]
  comments              Comment[]
  sentNotifications     Notification[]  @relation("ActorNotifications")
  receivedNotifications Notification[]  @relation("RecipientNotifications")
  assignedTasks         Task[]          @relation("TaskAssignee")
  multiAssignedTasks    Task[]          @relation("TaskAssignments")
  taskSets              TaskSet[]
}

model Project {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  category    String? // e.g. "student-project", "collaboration"
  startDate   DateTime?
  endDate     DateTime?
  isCompleted Boolean   @default(false)
  archived    Boolean   @default(false)

  // --- Supervisor + participants ---
  supervisor    User   @relation("ProjectSupervisor", fields: [supervisorId], references: [id])
  supervisorId  Int
  students      User[] @relation("ProjectStudents")
  collaborators User[] @relation("ProjectCollaborators")

  // --- Other ---
  members       ProjectMember[]
  tasks         Task[]
  notifications Notification[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  status        String          @default("On Track")
}

model ProjectMember {
  id        Int     @id @default(autoincrement())
  project   Project @relation(fields: [projectId], references: [id])
  projectId Int
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  role      String // 'student' | 'collaborator'

  @@index([projectId])
  @@index([userId])
}

model Task {
  id               Int            @id @default(autoincrement())
  project          Project        @relation(fields: [projectId], references: [id])
  projectId        Int
  title            String
  description      String?
  startDate        DateTime?
  dueDate          DateTime?
  status           TaskStatus     @default(TODO) // 'todo' | 'in_progress' | 'done'
  dependencyTaskId Int?
  flagged          Boolean        @default(false)
  duration        Int?
  assignee         User?          @relation("TaskAssignee", fields: [assigneeId], references: [id])
  assigneeId       Int?
  assignedUsers    User[]         @relation("TaskAssignments")
  comments         Comment[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  notifications    Notification[]

  @@index([projectId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  content   String
  createdAt DateTime @default(now())
}

model Notification {
  id        Int     @id @default(autoincrement())
  project   Project @relation(fields: [projectId], references: [id])
  projectId Int
  task      Task?   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    Int?

  actor       User @relation("ActorNotifications", fields: [actorId], references: [id])
  actorId     Int
  recipient   User @relation("RecipientNotifications", fields: [recipientId], references: [id])
  recipientId Int

  type      String // 'task_flagged' | 'task_commented'
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([recipientId, read])
  @@index([projectId])
}

enum UserRole {
  SUPERVISOR
  STUDENT
  COLLABORATOR
  ADMIN
}

model TaskSet {
  id           Int            @id @default(autoincrement())
  name         String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  supervisor   User           @relation(fields: [supervisorId], references: [id])
  supervisorId Int
  templates    TaskTemplate[] @relation("TaskSetTemplates")
}

model TaskTemplate {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  dueOffset   Int? // Days after project start
  duration    Int?
  order       Int? // Optional sequence for bulk application
  createdAt   DateTime @default(now())
  taskSet     TaskSet   @relation("TaskSetTemplates", fields: [taskSetId], references: [id], onDelete: Cascade)
  taskSetId   Int
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  BEHIND_SCHEDULE
  AT_RISK
  COMPLETE
  BLOCKED
}